namespace NosBarrage.Core.Cryptography;

public static class WorldCryptography
{
    private static readonly char[] Keys = { ' ', '-', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'n' };

    public static byte[] WorldDecrypt(byte[] bytes, int size)
    {
        List<byte> output = new List<byte>();

        var currentPacket = new List<byte>();
        var index = 0;

        while (index < size)
        {
            byte currentByte = bytes[index];
            index++;

            if (currentByte == 0xFF)
            {
                output.AddRange(currentPacket);
                currentPacket.Clear();
                continue;
            }

            var length = (byte)(currentByte & 0x7F);

            if ((currentByte & 0x80) != 0)
            {
                while (length != 0)
                {
                    if (index <= size)
                    {
                        currentByte = bytes[index];
                        index++;

                        var firstIndex = (byte)(((currentByte & 0xF0u) >> 4) - 1);
                        var first = (byte)(firstIndex != 255 ? firstIndex != 14 ? Keys[firstIndex] : '\u0000' : '?');
                        if (first != 0x6E)
                            currentPacket.Add(first);

                        if (length <= 1)
                            break;

                        var secondIndex = (byte)((currentByte & 0xF) - 1);
                        var second = (byte)(secondIndex != 255 ? secondIndex != 14 ? Keys[secondIndex] : '\u0000' : '?');
                        if (second != 0x6E)
                            currentPacket.Add(second);

                        length -= 2;
                    }
                    else
                    {
                        length--;
                    }
                }
            }
            else
            {
                while (length != 0)
                {
                    if (index < size)
                    {
                        currentPacket.Add((byte)(bytes[index] ^ 0xFF));
                        index++;
                    }
                    else if (index == size)
                    {
                        currentPacket.Add(0xFF);
                        index++;
                    }

                    length--;
                }
            }
        }

        return output.ToArray();
    }

}
